import { DOMMatrix } from './DOMMatrix.js';
declare const _matrix: unique symbol;
export declare var matrix: typeof _matrix;
declare const _is2D: unique symbol;
export declare var is2D: typeof _is2D;
export declare function getMatrixSymbols(): symbol[];
export declare var DOMMatrixReadOnly: {
    new (init?: string | ArrayLike<number>): {
        translate(tx?: number, ty?: number, tz?: number): DOMMatrix;
        scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        /** @deprecated use `matrix.scale()` */
        scaleNonUniform(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        rotate(angle?: number, originX?: number, originY?: number): DOMMatrix;
        rotateFromVector(_x?: number, _y?: number): DOMMatrix;
        rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;
        skewX(_sx?: number): DOMMatrix;
        skewY(_sy?: number): DOMMatrix;
        multiply(other: DOMMatrixReadOnly): DOMMatrix;
        flipX(): DOMMatrix;
        flipY(): DOMMatrix;
        inverse(): DOMMatrix;
        transformPoint(_point: DOMPointInit): DOMPoint;
        toFloat32Array(): Float32Array;
        toFloat64Array(): Float64Array;
        toString(): string;
        readonly is2D: boolean;
        readonly isIdentity: boolean;
        readonly a: number;
        readonly b: number;
        readonly c: number;
        readonly d: number;
        readonly e: number;
        readonly f: number;
        readonly m11: number;
        readonly m12: number;
        readonly m13: number;
        readonly m14: number;
        readonly m21: number;
        readonly m22: number;
        readonly m23: number;
        readonly m24: number;
        readonly m31: number;
        readonly m32: number;
        readonly m33: number;
        readonly m34: number;
        readonly m41: number;
        readonly m42: number;
        readonly m43: number;
        readonly m44: number;
        toJSON(): {
            a: number;
            b: number;
            c: number;
            d: number;
            e: number;
            f: number;
            m11: number;
            m12: number;
            m13: number;
            m14: number;
            m21: number;
            m22: number;
            m23: number;
            m24: number;
            m31: number;
            m32: number;
            m33: number;
            m34: number;
            m41: number;
            m42: number;
            m43: number;
            m44: number;
        };
        [_matrix]: Float64Array;
        [_is2D]: boolean;
    };
    fromMatrix(other: DOMMatrixReadOnly): {
        translate(tx?: number, ty?: number, tz?: number): DOMMatrix;
        scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        /** @deprecated use `matrix.scale()` */
        scaleNonUniform(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        rotate(angle?: number, originX?: number, originY?: number): DOMMatrix;
        rotateFromVector(_x?: number, _y?: number): DOMMatrix;
        rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;
        skewX(_sx?: number): DOMMatrix;
        skewY(_sy?: number): DOMMatrix;
        multiply(other: DOMMatrixReadOnly): DOMMatrix;
        flipX(): DOMMatrix;
        flipY(): DOMMatrix;
        inverse(): DOMMatrix;
        transformPoint(_point: DOMPointInit): DOMPoint;
        toFloat32Array(): Float32Array;
        toFloat64Array(): Float64Array;
        toString(): string;
        readonly is2D: boolean;
        readonly isIdentity: boolean;
        readonly a: number;
        readonly b: number;
        readonly c: number;
        readonly d: number;
        readonly e: number;
        readonly f: number;
        readonly m11: number;
        readonly m12: number;
        readonly m13: number;
        readonly m14: number;
        readonly m21: number;
        readonly m22: number;
        readonly m23: number;
        readonly m24: number;
        readonly m31: number;
        readonly m32: number;
        readonly m33: number;
        readonly m34: number;
        readonly m41: number;
        readonly m42: number;
        readonly m43: number;
        readonly m44: number;
        toJSON(): {
            a: number;
            b: number;
            c: number;
            d: number;
            e: number;
            f: number;
            m11: number;
            m12: number;
            m13: number;
            m14: number;
            m21: number;
            m22: number;
            m23: number;
            m24: number;
            m31: number;
            m32: number;
            m33: number;
            m34: number;
            m41: number;
            m42: number;
            m43: number;
            m44: number;
        };
        [_matrix]: Float64Array;
        [_is2D]: boolean;
    };
    fromFloat32Array(array: Float32Array): {
        translate(tx?: number, ty?: number, tz?: number): DOMMatrix;
        scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        /** @deprecated use `matrix.scale()` */
        scaleNonUniform(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        rotate(angle?: number, originX?: number, originY?: number): DOMMatrix;
        rotateFromVector(_x?: number, _y?: number): DOMMatrix;
        rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;
        skewX(_sx?: number): DOMMatrix;
        skewY(_sy?: number): DOMMatrix;
        multiply(other: DOMMatrixReadOnly): DOMMatrix;
        flipX(): DOMMatrix;
        flipY(): DOMMatrix;
        inverse(): DOMMatrix;
        transformPoint(_point: DOMPointInit): DOMPoint;
        toFloat32Array(): Float32Array;
        toFloat64Array(): Float64Array;
        toString(): string;
        readonly is2D: boolean;
        readonly isIdentity: boolean;
        readonly a: number;
        readonly b: number;
        readonly c: number;
        readonly d: number;
        readonly e: number;
        readonly f: number;
        readonly m11: number;
        readonly m12: number;
        readonly m13: number;
        readonly m14: number;
        readonly m21: number;
        readonly m22: number;
        readonly m23: number;
        readonly m24: number;
        readonly m31: number;
        readonly m32: number;
        readonly m33: number;
        readonly m34: number;
        readonly m41: number;
        readonly m42: number;
        readonly m43: number;
        readonly m44: number;
        toJSON(): {
            a: number;
            b: number;
            c: number;
            d: number;
            e: number;
            f: number;
            m11: number;
            m12: number;
            m13: number;
            m14: number;
            m21: number;
            m22: number;
            m23: number;
            m24: number;
            m31: number;
            m32: number;
            m33: number;
            m34: number;
            m41: number;
            m42: number;
            m43: number;
            m44: number;
        };
        [_matrix]: Float64Array;
        [_is2D]: boolean;
    };
    fromFloat64Array(array: Float64Array): {
        translate(tx?: number, ty?: number, tz?: number): DOMMatrix;
        scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        /** @deprecated use `matrix.scale()` */
        scaleNonUniform(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        rotate(angle?: number, originX?: number, originY?: number): DOMMatrix;
        rotateFromVector(_x?: number, _y?: number): DOMMatrix;
        rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;
        skewX(_sx?: number): DOMMatrix;
        skewY(_sy?: number): DOMMatrix;
        multiply(other: DOMMatrixReadOnly): DOMMatrix;
        flipX(): DOMMatrix;
        flipY(): DOMMatrix;
        inverse(): DOMMatrix;
        transformPoint(_point: DOMPointInit): DOMPoint;
        toFloat32Array(): Float32Array;
        toFloat64Array(): Float64Array;
        toString(): string;
        readonly is2D: boolean;
        readonly isIdentity: boolean;
        readonly a: number;
        readonly b: number;
        readonly c: number;
        readonly d: number;
        readonly e: number;
        readonly f: number;
        readonly m11: number;
        readonly m12: number;
        readonly m13: number;
        readonly m14: number;
        readonly m21: number;
        readonly m22: number;
        readonly m23: number;
        readonly m24: number;
        readonly m31: number;
        readonly m32: number;
        readonly m33: number;
        readonly m34: number;
        readonly m41: number;
        readonly m42: number;
        readonly m43: number;
        readonly m44: number;
        toJSON(): {
            a: number;
            b: number;
            c: number;
            d: number;
            e: number;
            f: number;
            m11: number;
            m12: number;
            m13: number;
            m14: number;
            m21: number;
            m22: number;
            m23: number;
            m24: number;
            m31: number;
            m32: number;
            m33: number;
            m34: number;
            m41: number;
            m42: number;
            m43: number;
            m44: number;
        };
        [_matrix]: Float64Array;
        [_is2D]: boolean;
    };
};
export declare function initDOMMatrixReadOnly(): {
    new (init?: string | ArrayLike<number>): {
        translate(tx?: number, ty?: number, tz?: number): DOMMatrix;
        scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        /** @deprecated use `matrix.scale()` */
        scaleNonUniform(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        rotate(angle?: number, originX?: number, originY?: number): DOMMatrix;
        rotateFromVector(_x?: number, _y?: number): DOMMatrix;
        rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;
        skewX(_sx?: number): DOMMatrix;
        skewY(_sy?: number): DOMMatrix;
        multiply(other: DOMMatrixReadOnly): DOMMatrix;
        flipX(): DOMMatrix;
        flipY(): DOMMatrix;
        inverse(): DOMMatrix;
        transformPoint(_point: DOMPointInit): DOMPoint;
        toFloat32Array(): Float32Array;
        toFloat64Array(): Float64Array;
        toString(): string;
        readonly is2D: boolean;
        readonly isIdentity: boolean;
        readonly a: number;
        readonly b: number;
        readonly c: number;
        readonly d: number;
        readonly e: number;
        readonly f: number;
        readonly m11: number;
        readonly m12: number;
        readonly m13: number;
        readonly m14: number;
        readonly m21: number;
        readonly m22: number;
        readonly m23: number;
        readonly m24: number;
        readonly m31: number;
        readonly m32: number;
        readonly m33: number;
        readonly m34: number;
        readonly m41: number;
        readonly m42: number;
        readonly m43: number;
        readonly m44: number;
        toJSON(): {
            a: number;
            b: number;
            c: number;
            d: number;
            e: number;
            f: number;
            m11: number;
            m12: number;
            m13: number;
            m14: number;
            m21: number;
            m22: number;
            m23: number;
            m24: number;
            m31: number;
            m32: number;
            m33: number;
            m34: number;
            m41: number;
            m42: number;
            m43: number;
            m44: number;
        };
        [_matrix]: Float64Array;
        [_is2D]: boolean;
    };
    fromMatrix(other: DOMMatrixReadOnly): {
        translate(tx?: number, ty?: number, tz?: number): DOMMatrix;
        scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        /** @deprecated use `matrix.scale()` */
        scaleNonUniform(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        rotate(angle?: number, originX?: number, originY?: number): DOMMatrix;
        rotateFromVector(_x?: number, _y?: number): DOMMatrix;
        rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;
        skewX(_sx?: number): DOMMatrix;
        skewY(_sy?: number): DOMMatrix;
        multiply(other: DOMMatrixReadOnly): DOMMatrix;
        flipX(): DOMMatrix;
        flipY(): DOMMatrix;
        inverse(): DOMMatrix;
        transformPoint(_point: DOMPointInit): DOMPoint;
        toFloat32Array(): Float32Array;
        toFloat64Array(): Float64Array;
        toString(): string;
        readonly is2D: boolean;
        readonly isIdentity: boolean;
        readonly a: number;
        readonly b: number;
        readonly c: number;
        readonly d: number;
        readonly e: number;
        readonly f: number;
        readonly m11: number;
        readonly m12: number;
        readonly m13: number;
        readonly m14: number;
        readonly m21: number;
        readonly m22: number;
        readonly m23: number;
        readonly m24: number;
        readonly m31: number;
        readonly m32: number;
        readonly m33: number;
        readonly m34: number;
        readonly m41: number;
        readonly m42: number;
        readonly m43: number;
        readonly m44: number;
        toJSON(): {
            a: number;
            b: number;
            c: number;
            d: number;
            e: number;
            f: number;
            m11: number;
            m12: number;
            m13: number;
            m14: number;
            m21: number;
            m22: number;
            m23: number;
            m24: number;
            m31: number;
            m32: number;
            m33: number;
            m34: number;
            m41: number;
            m42: number;
            m43: number;
            m44: number;
        };
        [_matrix]: Float64Array;
        [_is2D]: boolean;
    };
    fromFloat32Array(array: Float32Array): {
        translate(tx?: number, ty?: number, tz?: number): DOMMatrix;
        scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        /** @deprecated use `matrix.scale()` */
        scaleNonUniform(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        rotate(angle?: number, originX?: number, originY?: number): DOMMatrix;
        rotateFromVector(_x?: number, _y?: number): DOMMatrix;
        rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;
        skewX(_sx?: number): DOMMatrix;
        skewY(_sy?: number): DOMMatrix;
        multiply(other: DOMMatrixReadOnly): DOMMatrix;
        flipX(): DOMMatrix;
        flipY(): DOMMatrix;
        inverse(): DOMMatrix;
        transformPoint(_point: DOMPointInit): DOMPoint;
        toFloat32Array(): Float32Array;
        toFloat64Array(): Float64Array;
        toString(): string;
        readonly is2D: boolean;
        readonly isIdentity: boolean;
        readonly a: number;
        readonly b: number;
        readonly c: number;
        readonly d: number;
        readonly e: number;
        readonly f: number;
        readonly m11: number;
        readonly m12: number;
        readonly m13: number;
        readonly m14: number;
        readonly m21: number;
        readonly m22: number;
        readonly m23: number;
        readonly m24: number;
        readonly m31: number;
        readonly m32: number;
        readonly m33: number;
        readonly m34: number;
        readonly m41: number;
        readonly m42: number;
        readonly m43: number;
        readonly m44: number;
        toJSON(): {
            a: number;
            b: number;
            c: number;
            d: number;
            e: number;
            f: number;
            m11: number;
            m12: number;
            m13: number;
            m14: number;
            m21: number;
            m22: number;
            m23: number;
            m24: number;
            m31: number;
            m32: number;
            m33: number;
            m34: number;
            m41: number;
            m42: number;
            m43: number;
            m44: number;
        };
        [_matrix]: Float64Array;
        [_is2D]: boolean;
    };
    fromFloat64Array(array: Float64Array): {
        translate(tx?: number, ty?: number, tz?: number): DOMMatrix;
        scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        /** @deprecated use `matrix.scale()` */
        scaleNonUniform(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
        rotate(angle?: number, originX?: number, originY?: number): DOMMatrix;
        rotateFromVector(_x?: number, _y?: number): DOMMatrix;
        rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;
        skewX(_sx?: number): DOMMatrix;
        skewY(_sy?: number): DOMMatrix;
        multiply(other: DOMMatrixReadOnly): DOMMatrix;
        flipX(): DOMMatrix;
        flipY(): DOMMatrix;
        inverse(): DOMMatrix;
        transformPoint(_point: DOMPointInit): DOMPoint;
        toFloat32Array(): Float32Array;
        toFloat64Array(): Float64Array;
        toString(): string;
        readonly is2D: boolean;
        readonly isIdentity: boolean;
        readonly a: number;
        readonly b: number;
        readonly c: number;
        readonly d: number;
        readonly e: number;
        readonly f: number;
        readonly m11: number;
        readonly m12: number;
        readonly m13: number;
        readonly m14: number;
        readonly m21: number;
        readonly m22: number;
        readonly m23: number;
        readonly m24: number;
        readonly m31: number;
        readonly m32: number;
        readonly m33: number;
        readonly m34: number;
        readonly m41: number;
        readonly m42: number;
        readonly m43: number;
        readonly m44: number;
        toJSON(): {
            a: number;
            b: number;
            c: number;
            d: number;
            e: number;
            f: number;
            m11: number;
            m12: number;
            m13: number;
            m14: number;
            m21: number;
            m22: number;
            m23: number;
            m24: number;
            m31: number;
            m32: number;
            m33: number;
            m34: number;
            m41: number;
            m42: number;
            m43: number;
            m44: number;
        };
        [_matrix]: Float64Array;
        [_is2D]: boolean;
    };
};
export {};
//# sourceMappingURL=DOMMatrixReadOnly.d.ts.map